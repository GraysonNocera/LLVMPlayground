-- Configuring done
-- Generating done
-- Build files have been written to: /root/LLVMPlayground/part2_basic_data_flow_analysis/build
Consolidate compiler generated dependencies of target DataflowPass
[100%] Built target DataflowPass
Running DivZero on f
0x55c5f0
0x55c770sum.0
0x55c770i.0
0x55c728cmp
0x55c5f0
0x55c770add
0x55c5f0
0x55c770inc
0x55c5f0
0x55c770sub
0x55c770div
0x55c5f0
PROCESSING I: 

first flow in 2
after flowIn: Printing Memory:

transfer
branch inst
after transfer: Printing Memory:

Printing Memory:

flowOut
Printing Memory:

Printing Memory:

flow out: Printing Memory:

PROCESSING I: 

first flow in 2
Printing Memory:

Printing Memory:

after flowIn: Printing Memory:

transfer
phi node
after transfer: Printing Memory:

Printing Memory:
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
phi node
after transfer: Printing Memory:
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
compare inst
got d2: 1 and d3: 0
after transfer: Printing Memory:
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
branch inst
after transfer: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 3
adding 3 3
e1, e2 = e3 -> 3, 3 = 3
Nout for add 0x5a5ab0
after transfer: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
branch inst
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 1
adding 3 1
e1, e2 = e3 -> 3, 1 = 3
Nout for add 0x5a6f10
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
branch inst
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 1
e1, e2 = e3 -> 3, 1 = 3
Nout for add 0x5a8470
after transfer: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 3
Nout for add 0x5a8f10
after transfer: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
after transfer: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:

Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
phi node
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
phi node
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
compare inst
got d2: 1 and d3: 0
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
branch inst
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 3
adding 3 3
e1, e2 = e3 -> 3, 3 = 3
Nout for add 0x5a5ab0
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
branch inst
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 1
adding 3 1
e1, e2 = e3 -> 3, 1 = 3
Nout for add 0x5a6f10
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
branch inst
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 1
e1, e2 = e3 -> 3, 1 = 3
Nout for add 0x5afd40
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 3
Nout for add 0x5b0a00
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
phi node
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
phi node
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
compare inst
got d2: 1 and d3: 0
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
branch inst
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 3
adding 3 3
e1, e2 = e3 -> 3, 3 = 3
Nout for add 0x5a5ab0
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
branch inst
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 1
e1, e2 = e3 -> 3, 1 = 3
Nout for add 0x5b5ec0
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
Binary operator
Parsed d1, d2 = 3 3
Nout for add 0x5b6a80
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

PROCESSING I: 

first flow in 2
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

after flowIn: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

transfer
after transfer: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flowOut
Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

flow out: Printing Memory:
	%add = add nsw i32 %sum.0, %i.0 -> 3
	%cmp = icmp slt i32 %i.0, 10 -> 3
	%div = sdiv i32 %i.0, %sub -> 3
	%i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ] -> 3
	%inc = add nsw i32 %i.0, 1 -> 3
	%sub = sub nsw i32 %sum.0, 55 -> 3
	%sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ] -> 3

checking for errors 
DIVISION BY 0
Potential Instructions by DivZero: 
  %div = sdiv i32 %i.0, %sub
